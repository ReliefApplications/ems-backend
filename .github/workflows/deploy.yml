name: Back-end CD

on:
  repository_dispatch:
    types: [CD]

jobs:
  create_deployment:
    name: Create Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}

    permissions:
      deployments: write

    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      environment_url: ${{ steps.deployment.outputs.environment_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          initial-status: 'in_progress'
          token: '${{ github.token }}'
          environment-url: ${{ vars.DEPLOYMENT_URL }}
          environment: ${{ github.event.client_payload.environment }}
          auto-inactive: false

  deploy:
    name: Deploy ðŸš€
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    needs: create_deployment

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: Setup SSH Keys and known_hosts
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Update Docker
        run: ./CI/deploy.sh
        env:
          SSH_PASS: ${{ secrets.SSH_PASS }}
          CONNECTION: ${{ secrets.CONNECTION }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}

  update_deployment_status:
    name: Update Deployment Status âœ…
    runs-on: ubuntu-latest
    needs: 
      - create_deployment
      - deploy
    if: always()

    permissions:
      deployments: write

    steps:
      - name: Update deployment status (success)
        if: ${{ needs.deploy.result == 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ needs.create_deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create_deployment.outputs.deployment_id }}
          state: 'success'

      - name: Update deployment status (failure)
        if: ${{ needs.deploy.result != 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ needs.create_deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create_deployment.outputs.deployment_id }}
          state: 'failure'